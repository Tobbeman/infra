---
# tasks file for kvm_provision
- name: Ensure requirements in place
  package:
    name:
      - qemu-system
      - libvirt-clients
      - libvirt-daemon-system
      - libguestfs-tools
      - python3-libvirt
      - python3-lxml
    state: present
  become: yes

- name: Create network
  community.libvirt.virt_net:
    command: define
    name: "{{ macvtap_network_name }}"
    xml: "{{ lookup('template', 'network-template.xml.j2') }}"
    autostart: yes

- name: Start network
  community.libvirt.virt_net:
    name: "{{ macvtap_network_name }}"
    state: active

- name: Get VMs list
  community.libvirt.virt:
    command: list_vms
  register: existing_vms
  changed_when: no

- name: Create VM if not exists
  when: "vm_name not in existing_vms.list_vms"
  block:
  - name: Download base image
    get_url:
      url: "{{ base_image_url }}"
      dest: "/tmp/{{ base_image_name }}"
      checksum: "sha512:{{ base_image_sha }}"

  - name: Copy base image to libvirt directory
    copy:
      dest: "{{ libvirt_pool_dir }}/{{ vm_name }}.qcow2"
      src: "/tmp/{{ base_image_name }}"
      force: no
      remote_src: yes 
      mode: 0660
    register: copy_results

  - name: Configure the image
    command: |
      virt-customize -a {{ libvirt_pool_dir }}/{{ vm_name }}.qcow2 \
      --hostname {{ vm_name }} \
      --run-command 'useradd -m -p "$(echo {{ vm_user_pass }} | openssl passwd -1 -stdin)" infra && adduser infra sudo && apt update && apt install --reinstall openssh-server' \
      --ssh-inject "infra:string:{{ lookup('file', ssh_key) }}" \
      --uninstall cloud-init
    when: copy_results is changed

  - name: Define vm
    community.libvirt.virt:
      command: define
      xml: "{{ lookup('template', 'vm-template.xml.j2') }}"
      autostart: yes

- name: Ensure VM is started
  community.libvirt.virt:
    name: "{{ vm_name }}"
    state: running
  register: vm_start_results
  until: "vm_start_results is success"
  retries: 15
  delay: 2

- name: Ensure temporary file is deleted
  file:
    path: "/tmp/{{ base_image_name }}"
    state: absent
  when: cleanup_tmp | bool
